import { Injectable } from '@angular/core';
import {
  HttpInterceptor,
  HttpRequest,
  HttpHandler,
  HttpEvent,
  HttpErrorResponse,
} from '@angular/common/http';
import { Observable, throwError } from 'rxjs';
import { catchError, tap } from 'rxjs/operators';
import { TokenService } from '@core';
import { Router } from '@angular/router';

@Injectable()
export class TokenInterceptor implements HttpInterceptor {
  constructor(private tokenService: TokenService, private router: Router) {}

  intercept(
    request: HttpRequest<any>,
    next: HttpHandler
  ): Observable<HttpEvent<any>> {
    console.log('interceptor running!')
    const handler = () => {
      if (request.url.includes('/auth/logout')) {
        this.router.navigateByUrl('/auth/login');
      }
    };

    let authReq = request;
    console.log(this.tokenService.valid())
    if (this.tokenService.valid()) {
      authReq = request.clone({
        setHeaders: {
          Authorization: `Bearer ${this.tokenService.getBearerToken()}`,
          'Content-Type': 'application/json', // Add default Content-Type
          ...request.headers.keys().reduce((acc, key) => ({
            ...acc,
            [key]: request.headers.get(key)!,
          }), {}),
        },
        // withCredentials: true,
      });
    }

    return next.handle(authReq).pipe(
      catchError((error: HttpErrorResponse) => {
        if (error.status === 401) {
          // this.tokenService.clear();
          // Optionally navigate to login here as well
          // this.router.navigateByUrl('/auth/login');
        }
        console.error('HTTP Error:', error);
        return throwError(() => error);
      }),
      tap(() => handler())
    );
  }
}